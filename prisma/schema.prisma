datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Influencer {
  id                       Int     @id @default(autoincrement())
  channelName              String  @unique
  channelYoutubeId         String
  category                 String?
  avgViews                 Int
  engagementRate           Float
  topCountriesProportion   Float
  richCountriesFollowers   Int
  maleFollowers            Float
  followerGrowthRate       Float
  englishSpeakingFollowers Int
  country                  String
  language                 String
  deals                    Deal[]
  videos                   Video[]
}

model Agency {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  feeStructure Json
  createdAt    DateTime @default(now())
  deals        Deal[]
}

model Deal {
  id                Int        @id @default(autoincrement())
  name              String     // New field
  influencer        Influencer @relation(fields: [influencerId], references: [id])
  influencerId      Int
  agency            Agency?    @relation(fields: [agencyId], references: [id])
  agencyId          Int?
  contractedBy      String
  pricingType       String
  fixedCost         Float?
  cpm               Float?
  priceCeiling      Float?
  viewGuarantee     Int?
  viewGuaranteeDays Int?
  totalCost         Float      // Changed from totalSpend
  status            String     @default("active")
  numberOfVideos    Int
  uploadMonths      String[]   // New field
  videos            Video[]
}

model Video {
  id            Int                @id @default(autoincrement())
  youtubeId     String             @unique
  title         String
  trackingUrl   String
  videoLink     String
  influencer    Influencer         @relation(fields: [influencerId], references: [id])
  influencerId  Int
  deal          Deal?              @relation(fields: [dealId], references: [id])
  dealId        Int?
  postDate      DateTime
  couponCode    String?
  channelTitle  String?
  thumbnail     String?
  viewCount     Int?
  likeCount     Int?
  commentCount  Int?
  dailyMetrics  DailyVideoMetric[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}


model DailyVideoMetric {
  id          Int      @id @default(autoincrement())
  videoId     Int
  video       Video    @relation(fields: [videoId], references: [id])
  date        DateTime
  views       Int
  clicks      Int
  conversions Int      @default(0)

  @@unique([videoId, date])
}