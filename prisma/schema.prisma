datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Influencer {
  id                       Int     @id @default(autoincrement())
  channelName              String  @unique
  channelYoutubeId         String
  category                 String?
  avgViews                 Int
  engagementRate           Float
  topCountriesProportion   Float
  maleFollowers            Float
  followerGrowthRate       Float
  englishSpeakingFollowers Int
  country                  String
  language                 String
  deals                    Deal[]
  videos                   Video[]
}

enum Category {
  PRODUCTIVITY_AND_ORGANIZATION
  TECH_AND_SOFTWARE
  BUSINESS_AND_ENTREPRENEURSHIP
  LIFESTYLE_AND_VLOGS
  HEALTH_AND_WELLNESS
  EDUCATION_AND_CAREER
  ARTS_AND_CRAFTS
  FASHION_AND_BEAUTY
  TRAVEL_AND_CULTURE
  HOME_AND_DESIGN
  FINANCE_AND_INVESTING
  PHILOSOPHY_AND_PERSONAL_DEVELOPMENT
  ENTERTAINMENT_AND_MEDIA
  OTHER
}

model Agency {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  feeStructure Json
  createdAt    DateTime @default(now())
  deals        Deal[]
}

model Deal {
  id                Int        @id @default(autoincrement())
  name              String
  influencer        Influencer @relation(fields: [influencerId], references: [id])
  influencerId      Int
  agency            Agency?    @relation(fields: [agencyId], references: [id])
  agencyId          Int?
  contractedBy      String
  pricingType       String
  fixedCost         Float?
  cpm               Float?
  priceCeiling      Float?
  viewGuarantee     Int?
  viewGuaranteeDays Int?
  totalCost         Float
  status            String     @default("active")
  numberOfVideos    Int
  uploadMonths      String[]
  usage             String?
  deliverable       String?
  videos            Video[]
}

model Video {
  id            Int                @id @default(autoincrement())
  youtubeId     String             @unique
  title         String
  trackingUrl   String
  videoLink     String
  influencer    Influencer         @relation(fields: [influencerId], references: [id])
  influencerId  Int
  deal          Deal?              @relation(fields: [dealId], references: [id])
  dealId        Int?
  postDate      DateTime
  couponCode    String?
  channelTitle  String?
  channelId     String? // Added channelId field
  thumbnail     String?
  viewCount     Int?
  likeCount     Int?
  commentCount  Int?
  cost          Float              @default(0) // Added cost field
  clicks        Int                @default(0)
  dailyMetrics  DailyVideoMetric[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model DailyVideoMetric {
  id          Int      @id @default(autoincrement())
  videoId     Int
  video       Video    @relation(fields: [videoId], references: [id])
  date        DateTime
  views       Int
  clicks      Int
  conversions Int      @default(0)

  @@unique([videoId, date])
}